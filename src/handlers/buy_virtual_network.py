import datetime
import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from src.core.settings import bot_settings
from src.kbs import buy_virtual_network as kbs_buy_virtual_network, other
from src.crud.price import country_manager, tariff_manager
from src.crud.order import order_manager
from src.crud.user import user_manager
from src.models.order import OrderType, OrderStatus
from src.schemas.order import CreateOrderSchema

loger = logging.getLogger(__name__)


router = Router()

billing_period = {
    "day": "–¥–µ–Ω—å",
    "month": "–º–µ—Å",
    "year": "–≥–æ–¥",
}


@router.callback_query(F.data.in_(["buy_virtual_network", "back_to_choice_county"]))
async def choice_virtual_network_county(call: CallbackQuery, db_session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–¥–µ –≤—ã–±–∏—Ä–∞—é—Ç —Å—Ç—Ä–∞–Ω—É"""
    counties = await country_manager.get_all(db_session)
    counties_data_list = [
        {
            "text": county.view_country,
            "callback_data": f"{county.key_country}-{county.id}",
        }
        for county in counties
    ]
    await call.message.edit_text(
        text="""
–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ VPN ‚¨áÔ∏è\n
‚ö†Ô∏è –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω VPN –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –∏–ª–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ ‚Äì –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∞–Ω–æ–≤–æ–π VPN –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤!\n
‚õîÔ∏è –í—ã–±–∏—Ä–∞—è —Å—Ç—Ä–∞–Ω—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –º—ã –ù–ï –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –≤–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –†–æ—Å—Å–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ IP üòÑ
        """,
        reply_markup=kbs_buy_virtual_network.choice_county_inline_buttons_builder(
            counties_data_list
        ),
    )


@router.callback_query(F.data.startswith("country-"))
async def country_price_list(
    call: CallbackQuery, state: FSMContext, db_session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    country_id = call.data.split("-")[-1]
    country = await country_manager.get_by_id(db_session, country_id)
    tariff_list = await tariff_manager.get_country_tariff(db_session, country_id)
    data_price_list = [
        {
            "back_text": f"üéüÔ∏è{tariff.view_price}",
            "back_callback_data": f"{tariff.tariff_key}",
        }
        for tariff in tariff_list
    ]
    answer_text = "\n".join(
        [
            f"‚îú  {tariff.term} {billing_period[tariff.billing_period.value]}: {tariff.view_price} (–ª–∏–º–∏—Ç - {tariff.traffic_limit}–≥–±)"
            for tariff in tariff_list
        ]
    )
    await state.update_data(country=country.view_country)
    await call.message.edit_text(
        text=f"""
{country.view_country}
üí∞ –õ—É—á—à–∏–π VPN –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ!

{answer_text}
                """,
        reply_markup=kbs_buy_virtual_network.choice_country_tariff_inline_buttons_builder(
            prices=data_price_list
        ),
    )


@router.callback_query(F.data.startswith("tariff-"))
async def choice_price_county(
    call: CallbackQuery, state: FSMContext, db_session: AsyncSession
):
    data = await state.get_data()
    tariff_key = call.data
    tariff = await tariff_manager.get_tariff_by_tariff_key(db_session, tariff_key)
    tg_user = await user_manager.get_by_tg_id(db_session, id_=call.from_user.id)

    order_schema = CreateOrderSchema(
        tariff_id=tariff.id,
        tg_user_id=tg_user.id,
        status=OrderStatus.start,
        type=OrderType.buy,
        currency=tariff.currency,
        amount=tariff.price,
    )
    order = await order_manager.create(
        session=db_session,
        obj_schema=order_schema,
    )

    await call.message.edit_text(
        text=f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ: 
–°—Ç—Ä–∞–Ω–∞ - {data['country']}
–¶–µ–Ω–∞ - {order.tariff.view_price}
–°—Ä–æ–∫ - {order.tariff.term} {billing_period[order.tariff.billing_period.value]}
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É - {order.tariff.traffic_limit}–≥–±
        """,
        reply_markup=kbs_buy_virtual_network.user_validate_buy_virtual_network_inline_buttons(
            user_id=call.from_user.id,
            order_id=order.id,
        ),
    )


@router.callback_query(F.data.startswith("user_approve_buy_virtual_network"))
async def user_approve_buy_virtual_network(
    call: CallbackQuery, state: FSMContext, db_session: AsyncSession
):
    data = await state.get_data()
    await state.clear()
    order_id = call.data.split("-")[-1]
    order = await order_manager.get_by_id_with_tariff(session=db_session, id_=order_id)
    order.status = OrderStatus.in_progress

    await call.message.edit_text(
        text="""
–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 89634008750 (–°–±–µ—Ä–±–∞–Ω–∫)

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —á–∞—Ç–µ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω vpn –∫–ª—é—á.
            """
    )
    for admin in bot_settings.ADMINS:
        await call.bot.send_message(
            chat_id=admin,
            text=f""" 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username}
—Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑–∞–Ω –Ω–∞ –≤–ø–Ω.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:
–°—Ç—Ä–∞–Ω–∞ - {data['country']}
–¶–µ–Ω–∞ - {order.tariff.view_price}
–°—Ä–æ–∫ - {order.tariff.term} {billing_period[order.tariff.billing_period.value]}
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É - {order.tariff.traffic_limit}–≥–±
                                        """,
            reply_markup=kbs_buy_virtual_network.admin_validate_buy_virtual_network_inline_buttons(
                user_id=call.from_user.id,
                order_id=order.id,
            ),
        )


@router.callback_query(F.data.startswith("user_cancel_buy_virtual_network"))
async def user_cancel_buy_virtual_network(
    call: CallbackQuery, state: FSMContext, db_session: AsyncSession
):
    await state.clear()
    order_id = call.data.split("-")[-1]
    order = await order_manager.get_by_id_with_tariff(session=db_session, id_=order_id)
    order.status = OrderStatus.failed
    order.deleted_at = datetime.datetime.now()

    await call.message.edit_text(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=other.move_to(text="üîô–ù–∞–∑–∞–¥", callback_data="back_to_start_menu"),
    )


@router.callback_query(F.data.startswith("admin_approve_buy_virtual_network"))
async def payment_receipt(
    call: CallbackQuery, state: FSMContext, db_session: AsyncSession
):
    await state.clear()

    order_id = call.data.split("-")[-1]
    order = await order_manager.get_by_id(session=db_session, id_=order_id)
    order.status = OrderStatus.completed

    user_id = call.data.split("-")[-2]
    text = f"""
{call.message.text}

–û–ü–ê–õ–ß–ï–ù–û!!!
"""
    await call.message.edit_text(
        text=text,
    )
    await call.bot.send_message(
        chat_id=user_id,
        text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞",
    )


@router.callback_query(F.data.startswith("admin_cancel_buy_virtual_network"))
async def payment_receipt(
    call: CallbackQuery, state: FSMContext, db_session: AsyncSession
):
    await state.clear()

    order_id = call.data.split("-")[-1]
    order = await order_manager.get_by_id(session=db_session, id_=order_id)
    order.status = OrderStatus.failed
    order.deleted_at = datetime.datetime.now()

    user_id = call.data.split("-")[-2]
    text = f"""
    {call.message.text}

    –ù–ï–û–ü–õ–ê–ß–ï–ù–û!!!
    """
    await call.message.edit_text(
        text=text,
    )
    await call.bot.send_message(
        chat_id=user_id,
        text="–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–∏—à–ª–∞",
    )
