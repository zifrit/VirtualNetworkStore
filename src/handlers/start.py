import logging
from aiogram import Router, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.utils.deep_linking import decode_payload
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from src.utils.check_sub import check_subscription
from src.crud.user import user_manager, referral_manager
from src.schemas.user import CreateTgUserSchema, CreateReferralSchema
from src.kbs import user as kbs_user


loger = logging.getLogger("admin_log")


router = Router()


@router.message(CommandStart())
async def start_handler(
    message: Message, command: CommandObject, db_session: AsyncSession
):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É"""
    if await check_subscription(message.from_user.id, message.bot):
        if not await user_manager.get_by_tg_id(db_session, message.from_user.id):
            create_user = CreateTgUserSchema(
                username=(
                    message.from_user.username
                    if message.from_user.username
                    else message.from_user.id
                ),
                tg_id=message.from_user.id,
            )
            await user_manager.create(
                db_session,
                obj_schema=create_user,
            )
            loger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –±—ã–ª —Å–æ–∑–¥–∞–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", message.from_user.id)
        if command.args is not None:
            loger.info(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ %s –∫ –±–æ—Ç—É",
                message.from_user.id,
                int(decode_payload(command.args)),
            )
            if message.from_user.id != int(decode_payload(command.args)):
                create_referral = CreateReferralSchema(
                    referrer_tg_id=message.from_user.id,
                    referred_tg_id=int(decode_payload(command.args)),
                )
                status = await referral_manager.create(
                    session=db_session,
                    obj_schema=create_referral,
                )
                if status:
                    await message.answer(
                        "–†–µ—Ñ–∏—Ä–∞–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
                    )
                else:
                    await message.answer(
                        "–£–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–∏—Ä–∞–ª–∫–∞",
                    )
        await message.answer(
            """
–®–º–µ–ª—å-VPNüêù: –õ–µ—Ç–∏–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è!
–®–º–µ–ª—å-VPN ‚Äì —ç—Ç–æ –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –≤ –º–∏—Ä–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–º–µ–¥–ª–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏ ‚Äì –ø—Ä–æ—Å—Ç–æ –ª–µ—Ç–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ!
–í—Å–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —Å–æ—Ü—Å–µ—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ —Å–±–æ–µ–≤, –∞ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω ‚Äì –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!  –õ–µ—Ç–∏–º –≤–º–µ—Å—Ç–µ —Å –®–º–µ–ª—å-VPN!
        """,
            reply_markup=kbs_user.start_inline_button,
        )
    else:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª https://t.me/shmel_x!!")


@router.callback_query(F.data == "back_to_start_menu")
async def start_handler(call: CallbackQuery):
    await call.message.edit_text(
        """
–®–º–µ–ª—å-VPNüêù: –õ–µ—Ç–∏–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!
–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è! –®–º–µ–ª—å-VPN ‚Äì —ç—Ç–æ –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –≤ –º–∏—Ä–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–º–µ–¥–ª–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏ ‚Äì –ø—Ä–æ—Å—Ç–æ –ª–µ—Ç–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ! 
–í—Å–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —Å–æ—Ü—Å–µ—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ —Å–±–æ–µ–≤, –∞ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω ‚Äì –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å!  –õ–µ—Ç–∏–º –≤–º–µ—Å—Ç–µ —Å –®–º–µ–ª—å-VPN!
    """,
        reply_markup=kbs_user.start_inline_button,
    )
